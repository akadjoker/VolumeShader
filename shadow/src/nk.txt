        shader.Use();
        shader.SetMatrix("view", view);
        shader.SetMatrix("projection", projection);

        glClearColor(0.2f, 0.3f, 0.3f, 1.0f);
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT | GL_STENCIL_BUFFER_BIT);

        // 1. Renderiza o Plano (Chão) sem gravar no stencil buffer
        glStencilMask(0x00);              // Desativa a gravação no stencil buffer
        glStencilFunc(GL_ALWAYS, 0, 0xFF); // Garante que o chão seja sempre desenhado

        shader.SetVec3("objectColor", glm::vec3(1.0f, 1.0f, 1.0f));
        model = glm::translate(glm::mat4(1.0f), glm::vec3(0.0f, -1.0f, 0.0f));
        shader.SetMatrix("model", model);
        plane.Render();

        // 2. Renderiza o Cubo e grava no stencil buffer
        glStencilFunc(GL_ALWAYS, 1, 0xFF); // Escreve 1 no stencil buffer para o cubo
        glStencilMask(0xFF);               // Ativa gravação no stencil buffer

        model = glm::translate(glm::mat4(1.0f), glm::vec3(0.0f, 0.5f, 0.0f));
        shader.SetMatrix("model", model);
        shader.SetVec3("objectColor", glm::vec3(0.5f, 0.1f, 0.3f));
        cube.Render();

        // 3. Projeta a sombra usando a matriz de projeção e grava no stencil
        glm::vec3 lightPos(5.0f, 5.0f, 0.0f); // Posição da luz
        glm::mat4 shadowProj = glm::mat4(1.0f);
        shadowProj[1][3] = -1.0f / lightPos.y; // Projeção em direção ao eixo Y (chão)

        glStencilFunc(GL_ALWAYS, 2, 0xFF); // Escreva 2 no stencil buffer para a sombra projetada
        glStencilMask(0xFF);               // Ativa gravação no stencil buffer

        shadow.Use();
        glm::mat4 shadowModel = shadowProj * model;
        shadow.SetMatrix("model", shadowModel);
        shadow.SetMatrix("view", view);
        shadow.SetMatrix("projection", projection);
        shadow.SetVec3("objectColor", glm::vec3(0.0f, 0.0f, 0.0f)); // Sombra preta
        cube.Render();

        // 4. Renderiza a área da sombra no chão
        glStencilFunc(GL_EQUAL, 2, 0xFF); // Desenha onde o stencil é igual a 2 (área da sombra)
        glStencilMask(0x00);              // Desativa gravação no stencil buffer para a sombra

        shadow.SetVec3("objectColor", glm::vec3(0.0f, 0.0f, 0.0f));
        model = glm::mat4(1.0f); // Restaura o modelo para o plano
        shadow.SetMatrix("model", model);
        plane.Render();

        // Restaura as configurações padrão
        glStencilMask(0xFF);
        glEnable(GL_DEPTH_TEST);


        ********************************************************************

        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
        glEnable(GL_DEPTH_TEST);


        // glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT | GL_STENCIL_BUFFER_BIT);
        // glEnable(GL_DEPTH_TEST);
        // glEnable(GL_STENCIL_TEST);
        // glEnable(GL_CULL_FACE);
        // glStencilOp(GL_KEEP, GL_KEEP, GL_KEEP);

        // glStencilMask(0x00);
        // glStencilFunc(GL_ALWAYS, 0, 0xFF);
        //glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);

        shader.Use();
        shader.SetMatrix("view", view);
        shader.SetMatrix("projection", projection);
        shader.SetVec3("objectColor", glm::vec3(1.0f, 1.0f, 1.0f));
        model = glm::translate(glm::mat4(1.0f), glm::vec3(0.0f, 0.0f, 0.0f));
        shader.SetMatrix("model", model);
        plane.Render();

        model = glm::translate(glm::mat4(1.0f), glm::vec3(0.0f, 0.8f, 0.0f));
        shader.SetMatrix("model", model);
        shader.SetVec3("objectColor", glm::vec3(0.5f, 0.1f, 0.3f));
        cube.Render();


        //glEnable( GL_CULL_FACE );
        //glCullFace( GL_BACK   );
        //glCullFace( GL_FRONT   );

        startStencil();
            points.Use();
            points.SetMatrix("mvp", mvp);
            points.SetVec3("color", glm::vec3(0.8f, 0.8f, 0.2f));

                // Configuração para as faces traseiras do volume de sombra
                glCullFace(GL_FRONT);
                glStencilOp(GL_KEEP, GL_INCR_WRAP, GL_KEEP);
                glStencilFunc(GL_ALWAYS, 0, 0xFF);
                volume.Render();


                // Configuração para as faces frontais do volume de sombra
                glCullFace(GL_BACK);
                glStencilOp(GL_KEEP, GL_DECR_WRAP, GL_KEEP);
                glStencilFunc(GL_ALWAYS, 0, 0xFF);
                volume.Render();

        endStencil();

           // Restaura as configurações de profundidade e cor
        glCullFace(GL_BACK);
        glColorMask(GL_TRUE, GL_TRUE, GL_TRUE, GL_TRUE);
        glDepthMask(GL_TRUE);
        glStencilFunc(GL_NOTEQUAL, 0, 0xFF); // Somente desenha onde o stencil não é zero
        glStencilMask(0x00); // Impede escrita no stencil buffer
        glDisable(GL_DEPTH_TEST); // Desabilita o depth test para aplicar a sombra

        quadShader.Use();
        quadShader.SetInt("useTexture", 0);
        quadShader.SetVec3("color", glm::vec3(0.4f, 0.4f, 0.4f));
        quad.Render();

        glEnable(GL_DEPTH_TEST);
        glStencilFunc(GL_ALWAYS, 0, 0xFF); // Reseta o stencil
        glDisable(GL_STENCIL_TEST);
